
Funções de String:
A. CREATE TABLE nomes (
    nome VARCHAR(50)
);

INSERT INTO nomes (nome)
VALUES ('Roberta'), ('Roberto'), ('Maria Clara'), ('João');
B.SELECT UPPER(nome) AS nome_maiusculo
FROM nomes;

C.SELECT nome, LENGTH(nome) AS tamanho
FROM nomes;

D.SELECT
    CASE WHEN nome LIKE '%Maria%' THEN CONCAT('Sra. ', nome)
         ELSE CONCAT('Sr. ', nome)
    END AS nome_com_tratamento
FROM nomes;

2. Funções Numéricas:

A.CREATE TABLE produtos (
    produto VARCHAR(50),
    preco DECIMAL(10, 2),
    quantidade INT
);

INSERT INTO produtos (produto, preco, quantidade)
VALUES ('Produto A', 19.99, 5),
       ('Produto B', 29.95, 0),
       ('Produto C', 9.99, -3);


B.SELECT produto, ROUND(preco, 2) AS preco_arredondado
FROM produtos;

C. SELECT produto, ABS(quantidade) AS quantidade_absoluta
FROM produtos;


D.SELECT AVG(preco) AS media_precos
FROM produtos;

3. Funções de Data:

A.CREATE TABLE eventos (
    data_evento DATE
);

INSERT INTO eventos (data_evento)
VALUES ('2023-10-09'), ('2023-10-15'), ('2023-11-05');

B.INSERT INTO eventos (data_evento)
VALUES (NOW());

C.SELECT DATEDIFF('2023-11-05', '2023-10-15') AS dias_entre_datas;

D.SELECT data_evento, DAYNAME(data_evento) AS dia_da_semana
FROM eventos;

4. Funções de Controle de Fluxo:

A.SELECT produto,
       CASE WHEN quantidade > 0 THEN 'Em estoque'
            ELSE 'Fora de estoque'
       END AS status_estoque
FROM produtos;

B.SELECT produto,
       CASE WHEN preco < 10 THEN 'Barato'
            WHEN preco >= 10 AND preco < 20 THEN 'Médio'
            ELSE 'Caro'
       END AS categoria_preco
FROM produtos;

5.Função Personalizada:

A.DELIMITER //

CREATE FUNCTION TOTAL_VALOR(preco DECIMAL(10, 2), quantidade INT)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE valor_total DECIMAL(10, 2);
    SET valor_total = preco * quantidade;
    RETURN valor_total;
END //

DELIMITER ;

B.SELECT produto, quantidade, preco, TOTAL_VALOR(preco, quantidade) AS valor_total
FROM produtos;

 6. Funções de Agregação:

A.SELECT COUNT(*) AS total_produtos
FROM produtos;

B.SELECT produto, preco
FROM produtos
WHERE preco = (SELECT MAX(preco) FROM produtos);

C.SELECT produto, preco
FROM produtos
WHERE preco = (SELECT MIN(preco) FROM produtos);

D.SELECT SUM(IF(quantidade > 0, preco * quantidade, 0)) AS soma_total_estoque
FROM produtos;

7. Criando funções:

A.DELIMITER //

CREATE FUNCTION FATORIAL(n INT)
RETURNS INT
BEGIN
    DECLARE resultado INT DEFAULT 1;
    WHILE n > 0 DO
        SET resultado = resultado * n;
        SET n = n - 1;
    END WHILE;
    RETURN resultado;
END //

DELIMITER ;

B.DELIMITER //

CREATE FUNCTION EXPONENCIAL(base DECIMAL(10, 2), expoente INT)
RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE resultado DECIMAL(10, 2) DEFAULT 1.0;
    WHILE expoente > 0 DO
        SET resultado = resultado * base;
        SET expoente = expoente - 1;
    END WHILE;
    RETURN resultado;
END //

DELIMITER ;

C.DELIMITER //

CREATE FUNCTION PALINDROMO(palavra VARCHAR(255))
RETURNS INT
BEGIN
    DECLARE len INT;
    DECLARE i INT;
    DECLARE reversed VARCHAR(255);
    
    SET len = LENGTH(palavra);
    SET i = 1;
    SET reversed = '';
    
    WHILE i <= len DO
        SET reversed = CONCAT(SUBSTRING(palavra, i, 1), reversed);
        SET i = i + 1;
    END WHILE;
    
    IF palavra = reversed THEN
        RETURN 1; 
    ELSE
        RETURN 0;
